version: "3.9"

services:
  travel_hi_api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file:
      - ./api/.envs/.env
    working_dir: /api
    volumes:
      - ./api:/api    # dev: bind-mount, na prod zwykle COPY w Dockerfile
    networks: [default]
    expose:
      - "80"          # wewnętrznie dla reverse_proxy
    restart: unless-stopped
    healthcheck:
      # prosty healthcheck bez curl
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request,sys\ntry:\n  r=urllib.request.urlopen('http://127.0.0.1:80/health', timeout=3)\n  sys.exit(0 if r.status==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
    networks: [default]
    expose:
      - "80"          # reverse_proxy będzie się łączył po sieci Dockera
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:80/ >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  reverse_proxy:
    image: nginx:1.27-alpine
    depends_on:
      travel_hi_api:
        condition: service_healthy
      frontend:
        condition: service_healthy
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks: [default]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:80/health >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

networks:
  default:
    driver: bridge